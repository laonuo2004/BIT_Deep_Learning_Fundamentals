# Ultralytics 🚀 AGPL-3.0 License - https://ultralytics.com/license

# Parameters
nc: 80 # 类别数量 (例如，COCO 数据集有 80 个类别)
depth_multiple: 1.0 # 模型深度倍数，用于控制模型中 C3 模块的重复次数 (n)。与 yolov5m.yaml 相比，此值更大，表示模型更深。
width_multiple: 1.0 # 层通道倍数，用于控制模型中卷积层输出通道数 (c2)。与 yolov5m.yaml 相比，此值更大，表示模型更宽。
anchors:
  - [10, 13, 16, 30, 33, 23] # P3/8 特征图对应的锚点框，用于小目标检测
  - [30, 61, 62, 45, 59, 119] # P4/16 特征图对应的锚点框，用于中目标检测
  - [116, 90, 156, 198, 373, 326] # P5/32 特征图对应的锚点框，用于大目标检测

# YOLOv5 v6.0 backbone (骨干网络)
backbone:
  # [from, number, module, args]
  [
    [-1, 1, Conv, [64, 6, 2, 2]], # 0-P1/2: 输入通道为 3 (默认), 输出通道为 64 * width_multiple (64), 卷积核大小 6x6, 步长 2x2。用于第一次下采样。
    [-1, 1, Conv, [128, 3, 2]], # 1-P2/4: 输入通道为上一层输出，输出通道为 128 * width_multiple (128), 卷积核大小 3x3, 步长 2x2。用于第二次下采样。
    [-1, 3, C3, [128]], # 2: 输入通道为上一层输出，输出通道为 128 * width_multiple (128)，重复次数为 3 * depth_multiple (3)。C3 模块用于特征提取。
    [-1, 1, Conv, [256, 3, 2]], # 3-P3/8: 输入通道为上一层输出，输出通道为 256 * width_multiple (256), 卷积核大小 3x3, 步长 2x2。用于第三次下采样。
    [-1, 6, C3, [256]], # 4: 输入通道为上一层输出，输出通道为 256 * width_multiple (256)，重复次数为 6 * depth_multiple (6)。
    [-1, 1, Conv, [512, 3, 2]], # 5-P4/16: 输入通道为上一层输出，输出通道为 512 * width_multiple (512), 卷积核大小 3x3, 步长 2x2。用于第四次下采样。
    [-1, 9, C3, [512]], # 6: 输入通道为上一层输出，输出通道为 512 * width_multiple (512)，重复次数为 9 * depth_multiple (9)。
    [-1, 1, Conv, [1024, 3, 2]], # 7-P5/32: 输入通道为上一层输出，输出通道为 1024 * width_multiple (1024), 卷积核大小 3x3, 步长 2x2。用于第五次下采样。
    [-1, 3, C3, [1024]], # 8: 输入通道为上一层输出，输出通道为 1024 * width_multiple (1024)，重复次数为 3 * depth_multiple (3)。
    [-1, 1, SPPF, [1024, 5]], # 9: 输入通道为上一层输出，输出通道为 1024 * width_multiple (1024), 卷积核大小 5x5。SPPF 模块用于增强特征表达能力。
  ]

# YOLOv5 v6.0 head (头部网络，FPN+PAN 结构)
head: [
    [-1, 1, Conv, [512, 1, 1]], # 10: 输入通道为上一层输出，输出通道为 512 * width_multiple (512), 卷积核大小 1x1。用于上采样前的通道调整。
    [-1, 1, nn.Upsample, [None, 2, "nearest"]], # 11: 最近邻上采样，放大 2 倍。
    [[-1, 6], 1, Concat, [1]], # 12: 将上采样结果与骨干网络 P4 (索引 6) 的输出在通道维度上拼接。
    [-1, 3, C3, [512, False]], # 13: 输入通道为拼接后的通道数，输出通道为 512 * width_multiple (512)，重复次数为 3 * depth_multiple (3)。用于融合 P4 特征。

    [-1, 1, Conv, [256, 1, 1]], # 14: 输入通道为上一层输出，输出通道为 256 * width_multiple (256), 卷积核大小 1x1。用于上采样前的通道调整。
    [-1, 1, nn.Upsample, [None, 2, "nearest"]], # 15: 最近邻上采样，放大 2 倍。
    [[-1, 4], 1, Concat, [1]], # 16: 将上采样结果与骨干网络 P3 (索引 4) 的输出在通道维度上拼接。
    [-1, 3, C3, [256, False]], # 17 (P3/8-small): 输入通道为拼接后的通道数，输出通道为 256 * width_multiple (256)，重复次数为 3 * depth_multiple (3)。用于融合 P3 特征。

    [-1, 1, Conv, [256, 3, 2]], # 18: 输入通道为上一层输出，输出通道为 256 * width_multiple (256), 卷积核大小 3x3, 步长 2x2。用于下采样。
    [[-1, 14], 1, Concat, [1]], # 19: 将下采样结果与头部网络 P4 (索引 14) 的输出在通道维度上拼接。
    [-1, 3, C3, [512, False]], # 20 (P4/16-medium): 输入通道为拼接后的通道数，输出通道为 512 * width_multiple (512)，重复次数为 3 * depth_multiple (3)。用于融合 P4 特征。

    [-1, 1, Conv, [512, 3, 2]], # 21: 输入通道为上一层输出，输出通道为 512 * width_multiple (512), 卷积核大小 3x3, 步长 2x2。用于下采样。
    [[-1, 10], 1, Concat, [1]], # 22: 将下采样结果与头部网络 P5 (索引 10) 的输出在通道维度上拼接。
    [-1, 3, C3, [1024, False]], # 23 (P5/32-large): 输入通道为拼接后的通道数，输出通道为 1024 * width_multiple (1024)，重复次数为 3 * depth_multiple (3)。用于融合 P5 特征。

    [[17, 20, 23], 1, Detect, [nc, anchors]], # 24: 检测头，接收 P3/8、P4/16、P5/32 三个尺度的特征图，进行目标检测。
  ]
